import sqlite3
import logging
LOG_FORMAT = "%(levelname)s,%(lineno)d,%(asctime)s,%(message)s"
logging.basicConfig(filename="music_database_log.log",
                             level=logging.DEBUG,
                             format=LOG_FORMAT)
logger = logging.getLogger()
# Skapa en anslutning till databasen
conn = sqlite3.connect('music_database.db')
cursor = conn.cursor()

# Skapa artist-tabellen
cursor.execute('''
    CREATE TABLE IF NOT EXISTS artist (
        artist_id INTEGER PRIMARY KEY,
        artist_name TEXT
    )
''')
logger.debug("Skapat TABLE artist")
# Skapa album-tabellen med en främmande nyckel (artist_id) som refererar till artist-tabellen
cursor.execute('''
    CREATE TABLE IF NOT EXISTS album (
        album_id INTEGER PRIMARY KEY,
        album_name TEXT,
        release_year INTEGER,
        artist_id INTEGER,
        FOREIGN KEY (artist_id) REFERENCES artist(artist_id)
    )
''')
logger.debug("Skapat TABLE album")
# Skapa tracks-tabellen med två främmande nycklar (album_id och artist_id)
cursor.execute('''
    CREATE TABLE IF NOT EXISTS tracks (
        track_id INTEGER PRIMARY KEY,
        track_name TEXT,
        release_year INTEGER,
        album_id INTEGER,
        artist_id INTEGER,
        FOREIGN KEY (album_id) REFERENCES album(album_id),
        FOREIGN KEY (artist_id) REFERENCES artist(artist_id)
    )
''')
logger.debug("Skapat TABLE tracks")
# Skapa ett index för att snabba upp sökningar baserat på artistnamn i artist-tabellen
cursor.execute('''
    CREATE INDEX IF NOT EXISTS idx_artist_name ON artist(artist_name)
''')
logger.debug("Skapat INDEX artist_name")
# Skapa ett index för att snabba upp sökningar baserat på albumnamn i album-tabellen
cursor.execute('''
    CREATE INDEX IF NOT EXISTS idx_album_name ON album(album_name)
''')
logger.debug("Skapat INDEX album_name")
# Kommitera ändringar och stäng anslutningen
conn.commit()
conn.close()
